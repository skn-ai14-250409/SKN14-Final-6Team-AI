name: FastAPI CICD App

on:
  pull_request:
    branches: [ "main" ]
    types: [ "closed" ]               # PR이 closed 되었을 때만 트리거

jobs:
  build-deploy:
    # ✅ PR이 'closed'라도 'merged == true'인 경우에만 배포. push 이벤트는 항상 허용.
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    concurrency:
      group: fastapi-eb-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 시크릿 존재 여부 빠르게 점검
      - name: Validate Docker/EB secrets
        run: |
          [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] || { echo "❌ DOCKERHUB_USERNAME is missing"; exit 1; }
          [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]    || { echo "❌ DOCKERHUB_TOKEN is missing"; exit 1; }
          [ -n "${{ secrets.DOCKER_IMAGENAME }}" ]   || { echo "❌ DOCKER_IMAGENAME is missing"; exit 1; }
          [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]  || { echo "❌ AWS_ACCESS_KEY_ID is missing"; exit 1; }
          [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] || { echo "❌ AWS_SECRET_ACCESS_KEY is missing"; exit 1; }
          [ -n "${{ secrets.AWS_EB_APPLICATION_NAME }}" ] || { echo "❌ AWS_EB_APPLICATION_NAME is missing"; exit 1; }
          [ -n "${{ secrets.AWS_EB_ENVIRONMENT_NAME }}" ] || { echo "❌ AWS_EB_ENVIRONMENT_NAME is missing"; exit 1; }

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          # sha + latest 두 태그 밀어두면 롤백/고정 모두 편함
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGENAME }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGENAME }}:latest

      - name: Generate Dockerrun.aws.json
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGENAME }}:${{ github.sha }}
        run: |
          cat > Dockerrun.aws.json << 'EOF'
          {
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "${DOCKER_IMAGE}",
              "Update": "true"
            },
            "Ports": [
              { "ContainerPort": "8000" }
            ],
            "Environment": [
              { "Name": "APP_MODULE", "Value": "app:app" },
              { "Name": "PORT", "Value": "8000" },
              { "Name": "HOST", "Value": "0.0.0.0" },
              { "Name": "WORKERS", "Value": "2" }
            ]
          }
          EOF

      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.AWS_EB_APPLICATION_NAME }}
          environment_name: ${{ secrets.AWS_EB_ENVIRONMENT_NAME }}
          region: ap-northeast-2
          # 매 실행마다 고유해지는 라벨 (commit+run)
          version_label: "app-${{ github.sha }}-${{ github.run_id }}"
          # 같은 라벨이 이미 있으면 그 버전을 재사용
          use_existing_version_if_available: true
          deployment_package: Dockerrun.aws.json
